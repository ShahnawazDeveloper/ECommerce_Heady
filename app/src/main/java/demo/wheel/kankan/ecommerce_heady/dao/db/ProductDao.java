package demo.wheel.kankan.ecommerce_heady.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Product_id = new Property(1, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Category_id = new Property(2, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Date_added = new Property(4, String.class, "date_added", false, "DATE_ADDED");
        public final static Property View_count = new Property(5, Long.class, "view_count", false, "VIEW_COUNT");
        public final static Property Order_count = new Property(6, Long.class, "order_count", false, "ORDER_COUNT");
        public final static Property Shares = new Property(7, Long.class, "shares", false, "SHARES");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_ID\" INTEGER," + // 1: product_id
                "\"CATEGORY_ID\" INTEGER," + // 2: category_id
                "\"NAME\" TEXT," + // 3: name
                "\"DATE_ADDED\" TEXT," + // 4: date_added
                "\"VIEW_COUNT\" INTEGER," + // 5: view_count
                "\"ORDER_COUNT\" INTEGER," + // 6: order_count
                "\"SHARES\" INTEGER);"); // 7: shares
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(2, product_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(3, category_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String date_added = entity.getDate_added();
        if (date_added != null) {
            stmt.bindString(5, date_added);
        }
 
        Long view_count = entity.getView_count();
        if (view_count != null) {
            stmt.bindLong(6, view_count);
        }
 
        Long order_count = entity.getOrder_count();
        if (order_count != null) {
            stmt.bindLong(7, order_count);
        }
 
        Long shares = entity.getShares();
        if (shares != null) {
            stmt.bindLong(8, shares);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(2, product_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(3, category_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String date_added = entity.getDate_added();
        if (date_added != null) {
            stmt.bindString(5, date_added);
        }
 
        Long view_count = entity.getView_count();
        if (view_count != null) {
            stmt.bindLong(6, view_count);
        }
 
        Long order_count = entity.getOrder_count();
        if (order_count != null) {
            stmt.bindLong(7, order_count);
        }
 
        Long shares = entity.getShares();
        if (shares != null) {
            stmt.bindLong(8, shares);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // category_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date_added
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // view_count
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // order_count
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // shares
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCategory_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate_added(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setView_count(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setOrder_count(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setShares(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
