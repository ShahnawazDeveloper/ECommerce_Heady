package demo.wheel.kankan.ecommerce_heady.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VARIANT".
*/
public class VariantDao extends AbstractDao<Variant, Long> {

    public static final String TABLENAME = "VARIANT";

    /**
     * Properties of entity Variant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Variant_id = new Property(1, Long.class, "variant_id", false, "VARIANT_ID");
        public final static Property Product_id = new Property(2, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Color = new Property(3, String.class, "color", false, "COLOR");
        public final static Property Size = new Property(4, String.class, "size", false, "SIZE");
        public final static Property Prize = new Property(5, String.class, "prize", false, "PRIZE");
    }


    public VariantDao(DaoConfig config) {
        super(config);
    }
    
    public VariantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VARIANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VARIANT_ID\" INTEGER," + // 1: variant_id
                "\"PRODUCT_ID\" INTEGER," + // 2: product_id
                "\"COLOR\" TEXT," + // 3: color
                "\"SIZE\" TEXT," + // 4: size
                "\"PRIZE\" TEXT);"); // 5: prize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VARIANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Variant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long variant_id = entity.getVariant_id();
        if (variant_id != null) {
            stmt.bindLong(2, variant_id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(3, product_id);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(5, size);
        }
 
        String prize = entity.getPrize();
        if (prize != null) {
            stmt.bindString(6, prize);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Variant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long variant_id = entity.getVariant_id();
        if (variant_id != null) {
            stmt.bindLong(2, variant_id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(3, product_id);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(5, size);
        }
 
        String prize = entity.getPrize();
        if (prize != null) {
            stmt.bindString(6, prize);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Variant readEntity(Cursor cursor, int offset) {
        Variant entity = new Variant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // variant_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // product_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // prize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Variant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVariant_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProduct_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Variant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Variant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Variant entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
